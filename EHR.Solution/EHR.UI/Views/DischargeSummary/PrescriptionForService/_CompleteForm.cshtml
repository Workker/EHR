@using System.Globalization
@using EHR.Domain.Entities
@using EHR.Infrastructure.Util
@using EHR.UI.Models

<script type="text/javascript">
    function AutoCompletePrescription(objeto, valor) {
        switch (valor.val()) {
            case "1":
                GenericAutoComplete(objeto, '/DischargeSummary/DefAutoComplete', '#def')
                break;
            default:
                GenericAutoCompleteWhichType(objeto, '/DischargeSummary/TypePrescriptionAutoComplete', '#def', valor.val())
                break;
        }
    }
</script>

<form id="PrescriptionForServiceForm">
    <label>Tipo prescri&ccedil;&atilde;o:</label>
    <select id="tipoPrescricao" name="prescription.type">
        <option value="-1">Selecione</option>
        <option value="1">
            Medicamentos
        </option>
        <option value="2">
            Cuidados
        </option>
        <option value="3">
            Dietas
        </option>
        <option value="4">
            Procedimentos
        </option>
        <option value="5">
            Suporte Ventilatório
        </option>
        <option value="6">
            Monitorização
        </option>
        <option value="7">
            Hemocomponentes
        </option>
    </select>
    <br />
    <br />

    <input type="hidden" name="medication.type" value="@ViewBag.MedicationType" />
    <label>Pesquisa:</label>
    <input type="text" name="prescription.typePrescription.description" style="margin-left: 10px;" onclick="AutoCompletePrescription(this, $('#tipoPrescricao'));" />
    <input type="hidden" name="prescription.typePrescription.id" id="def" />
    <br />
    <br />
    <label>Apresenta&ccedil;&atilde;o:</label>
    <input type="number" name="prescription.presentation" style="margin: 0px 5px 0px 10px;" min="0.0" value="0.0" />
    <select name="prescription.presentationType">
        <option value="-1">Selecione</option>
        @foreach (var value in Enum.GetValues(typeof(PresentationTypeEnum)).Cast<short>().ToList())
        {
            <option value="@value">
                @EnumUtil.GetDescriptionFromEnumValue((PresentationTypeEnum)Enum.Parse(typeof(PresentationTypeEnum), value.ToString(CultureInfo.InvariantCulture)))
            </option>
        }
    </select>
    <br />
    <br />
    <label>Dose:</label>
    <input type="number" name="prescription.dose" required style="margin: 0px 5px 0px 60px;" min="0.0" value="0.0" />
    <select name="prescription.dosage" required>
        <option value="-1">Selecione</option>
        @foreach (var value in Enum.GetValues(typeof(DosageEnum)).Cast<short>().ToList())
        {
            <option value="@value">
                @EnumUtil.GetDescriptionFromEnumValue((DosageEnum)Enum.Parse(typeof(DosageEnum), value.ToString(CultureInfo.InvariantCulture)))
            </option>
        }
    </select>
    <br />
    <br />
    <label>Via:</label>
    <select name="prescription.way" required style="margin: 0px 5px 0px 70px;">
        <option value="-1">Selecione</option>
        @foreach (var value in Enum.GetValues(typeof(WayEnum)).Cast<short>().ToList())
        {
            <option value="@value">
                @EnumUtil.GetDescriptionFromEnumValue((WayEnum)Enum.Parse(typeof(WayEnum), value.ToString(CultureInfo.InvariantCulture)))
            </option>
        }
    </select>
    <label>Local:</label>
    <input type="text" name="prescription.place" />
    <br />
    <br />
    <label>Frequ&ecirc;ncia:</label>
    <select name="medication.prescription" required style="margin: 0px 5px 0px 25px;" onchange="SelectFrequencyCase(this);">
        <option value="-1">Selecione</option>
        @foreach (var value in Enum.GetValues(typeof(FrequencyEnum)).Cast<short>().ToList())
        {
            <option value="@value">
                @EnumUtil.GetDescriptionFromEnumValue((FrequencyEnum)Enum.Parse(typeof(FrequencyEnum), value.ToString(CultureInfo.InvariantCulture)))
            </option>
        }
    </select>
    <select name="prescription.frequencyCase" disabled id="frequencyCase">
        <option value="-1">Selecione</option>
        @foreach (var value in Enum.GetValues(typeof(FrequencyCaseEnum)).Cast<short>().ToList())
        {
            <option value="@value">
                @EnumUtil.GetDescriptionFromEnumValue((FrequencyCaseEnum)Enum.Parse(typeof(FrequencyCaseEnum), value.ToString(CultureInfo.InvariantCulture)))
            </option>
        }
    </select>
    <br />
    <br />
    <label>Dura&ccedil;&atilde;o:</label>
    <input type="number" name="prescription.duration" style="margin-left: 40px;" min="1" value="1" />&nbsp;&nbsp;Dia(s)<br />
    <br />
    <br />

    @{
        var accountM = ((SummaryModel)Model).Account;
        var hospital = ((SummaryModel)Model).Hospital;

        var professionalRegistration = accountM.ProfessionalRegistration.Where(h => h.State.Id == hospital.State.Id);

        if (professionalRegistration.Any())
        {
            <label>
                @EnumUtil.GetDescriptionFromEnumValue((ProfessionalRegistrationTypeEnum)Enum.Parse(typeof(ProfessionalRegistrationTypeEnum), professionalRegistration.SingleOrDefault().Type.ToString(CultureInfo.InvariantCulture))):
            </label>
            @:&nbsp;<input type="text" disabled value="@professionalRegistration.SingleOrDefault().Number" />
            <br />
            <br />
            <label>M&eacute;dico:</label>@:&nbsp;<input type="text" disabled value="@(string.Concat(((SummaryModel)Model).Account.FirstName, " ", ((SummaryModel)Model).Account.LastName))" />
            <br />
            <br />
        }
    }
    <label>Prescrição realizada em:</label>&nbsp;
    @{
        ViewBag.Context = "PrescribedHigh";
    }
    <input type="text" disabled="disabled" name="prescriptionDate" maxlength="10">
    <input type="hidden" name="prescription.prescribedHighday" />
    <input type="hidden" name="prescription.prescribedHighmonth" />
    <input type="hidden" name="prescription.prescribedHighyear" />
    <br />
    <br />
    
    <input type="submit" value="Inativar" class="uibutton large confirm" name="inativar" />&nbsp;&nbsp;
    <input type="submit" value="Salvar" class="uibutton large confirm" name="salvar" />&nbsp;&nbsp;
    <input type="reset" onclick="closeForm(this);" value="Cancelar" class="uibutton large" />
</form>
<script type="text/javascript">


    $(document).ready(function () {
        $("#PrescriptionForServiceForm input[name='prescriptionDate']").val(@DateTime.Now.Day.ToString() + "/" + @DateTime.Now.Month.ToString() +"/"+ @DateTime.Now.Year.ToString());
        $("#PrescriptionForServiceForm input[name='inativar']").click(function () {
            saveRow(this, "/DischargeSummary/InactivePrescriptionForService");
        });
        $("#PrescriptionForServiceForm input[name='salvar']").click(function () {

            if ($("input[name='medication.description']").val() == "") {

                displayMessage("O campo medica&ccedil;&atilde;o deve ser preenchido.", "error");
                //MarkInvalidField(secondEmailField);
                $("input[name='medication.description']").focus();
                return false;
            }

            if ($("input[name='medication.presentation']").val() == "" || $("input[name='medication.presentation']").val() == "0.0") {

                displayMessage("O campo apresenta&ccedil;&atilde;o deve ser preenchido.", "error");
                //MarkInvalidField(secondEmailField);
                $("input[name='medication.presentation']").focus();
                return false;
            }

            if ($("select[name='medication.presentationType']").val() == "-1") {

                displayMessage("Um tipo de apreesenta&ccedil;&atilde;o deve ser selecionado.", "error");
                //MarkInvalidField(secondEmailField);
                $("select[name='medication.presentationType']").focus();
                return false;
            }

            if ($("input[name='medication.dose']").val() == "" || $("input[name='medication.dose']").val() == "0.0") {

                displayMessage("O campo dose deve ser preenchido.", "error");
                //MarkInvalidField(secondEmailField);
                $("input[name='medication.dose']").focus();
                return false;
            }

            if ($("select[name='medication.dosage']").val() == "-1") {

                displayMessage("Um tipo de dosagem deve ser selecionado.", "error");
                //MarkInvalidField(secondEmailField);
                $("select[name='medication.dosage']").focus();
                return false;
            }

            if ($("select[name='medication.way']").val() == "-1") {

                displayMessage("Um tipo de via deve ser selecionado.", "error");
                //MarkInvalidField(secondEmailField);
                $("select[name='medication.way']").focus();
                return false;
            }

            if ($("select[name='medication.frequency']").val() == "-1") {

                displayMessage("Um tipo de freq&uuml;&ecirc;ncia deve ser selecionado.", "error");
                //MarkInvalidField(secondEmailField);
                $("select[name='medication.frequency']").focus();
                return false;
            }

            if ($("input[name='medication.duration']").val() == "") {

                displayMessage("O campo dura&ccedil;&atilde;o deve ser preenchido.", "error");
                //MarkInvalidField(secondEmailField);
                $("input[name='medication.duration']").focus();
                return false;
            }


            saveRow(this, "/DischargeSummary/SavePrescriptionForService");
        });

    });

    function SelectFrequencyCase(e) {
        if ($(e).val() == 8) {
            $(e).next().removeAttr("disabled");
        } else {
            $(e).next().attr("disabled", "disabled");
        }
    }
    $('input[type="number"]').numeric();
</script>
